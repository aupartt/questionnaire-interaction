services:
    postgres:
        image: postgres
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        restart: unless-stopped
        volumes:
            - postgres-data:/var/lib/postgresql/data
        ports:
            - 5432:5432
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - app-network

    adminer:
        image: adminer
        ports:
            - 8080:8080
        restart: unless-stopped
        depends_on:
            - postgres
        networks:
            - app-network

    backend:
        build: 
            context: ./backend/
            dockerfile: ./Dockerfile
        image: backend-api:latest
        environment:
            API_KEY_MOCK: ${API_KEY_MOCK}
            API_BASE_PATH: ${API_BASE_PATH:-/api/v1}
            API_BASE_VERSION: ${API_BASE_PATH:-v1}
            API_PORT: ${API_PORT:-8090}
            FRONT_URL: http://localhost:3000
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_HOST: postgres
            POSTGRES_PORT: 5432
        restart: unless-stopped
        ports:
            - ${API_PORT:-8090}:${API_PORT:-8090}
        networks:
            - app-network


volumes:
    postgres-data:
networks:
    app-network:
